!function(){var define,requireModule;!function(){var registry={},seen={};define=function(name,deps,callback){registry[name]={deps:deps,callback:callback}},requireModule=function(name){if(seen[name])return seen[name];seen[name]={};var mod,deps,callback,reified,exports;if(mod=registry[name],!mod)throw new Error("Module '"+name+"' not found.");deps=mod.deps,callback=mod.callback,reified=[];for(var i=0,l=deps.length;l>i;i++)"exports"===deps[i]?reified.push(exports={}):reified.push(requireModule(deps[i]));var value=callback.apply(this,reified);return seen[name]=exports||value}}(),function(){var DS;"undefined"==typeof DS&&(DS=Ember.Namespace.create({VERSION:"1.0.0-beta.7+canary.238bb5ce"}),"undefined"!=typeof window&&(window.DS=DS),Ember.libraries&&Ember.libraries.registerCoreLibrary("Ember Data",DS.VERSION))}(),function(){var ContainerProxy=function(container){this.container=container};ContainerProxy.prototype.aliasedFactory=function(path,preLookup){var _this=this;return{create:function(){return preLookup&&preLookup(),_this.container.lookup(path)}}},ContainerProxy.prototype.registerAlias=function(source,dest,preLookup){var factory=this.aliasedFactory(dest,preLookup);return this.container.register(source,factory)},ContainerProxy.prototype.registerDeprecation=function(deprecated,valid){var preLookupCallback=function(){Ember.deprecate("You tried to look up '"+deprecated+"', but this has been deprecated in favor of '"+valid+"'.",!1)};return this.registerAlias(deprecated,valid,preLookupCallback)},ContainerProxy.prototype.registerDeprecations=function(proxyPairs){for(var i=proxyPairs.length;i>0;i--){var proxyPair=proxyPairs[i-1],deprecated=proxyPair.deprecated,valid=proxyPair.valid;this.registerDeprecation(deprecated,valid)}},DS.ContainerProxy=ContainerProxy}(),function(){function aliasMethod(methodName){return function(){return this[methodName].apply(this,arguments)}}var get=Ember.get,isNone=(Ember.set,Ember.isNone);DS.JSONSerializer=Ember.Object.extend({primaryKey:"id",applyTransforms:function(type,data){return type.eachTransformedAttribute(function(key,type){var transform=this.transformFor(type);data[key]=transform.deserialize(data[key])},this),data},normalize:function(type,hash){return hash?(this.applyTransforms(type,hash),hash):hash},serialize:function(record,options){var json={};if(options&&options.includeId){var id=get(record,"id");id&&(json[get(this,"primaryKey")]=id)}return record.eachAttribute(function(key,attribute){this.serializeAttribute(record,json,key,attribute)},this),record.eachRelationship(function(key,relationship){"belongsTo"===relationship.kind?this.serializeBelongsTo(record,json,relationship):"hasMany"===relationship.kind&&this.serializeHasMany(record,json,relationship)},this),json},serializeAttribute:function(record,json,key,attribute){var attrs=get(this,"attrs"),value=get(record,key),type=attribute.type;if(type){var transform=this.transformFor(type);value=transform.serialize(value)}key=attrs&&attrs[key]||(this.keyForAttribute?this.keyForAttribute(key):key),json[key]=value},serializeBelongsTo:function(record,json,relationship){var key=relationship.key,belongsTo=get(record,key);key=this.keyForRelationship?this.keyForRelationship(key,"belongsTo"):key,json[key]=isNone(belongsTo)?belongsTo:get(belongsTo,"id"),relationship.options.polymorphic&&this.serializePolymorphicType(record,json,relationship)},serializeHasMany:function(record,json,relationship){var key=relationship.key,relationshipType=DS.RelationshipChange.determineRelationshipType(record.constructor,relationship);("manyToNone"===relationshipType||"manyToMany"===relationshipType)&&(json[key]=get(record,key).mapBy("id"))},serializePolymorphicType:Ember.K,extract:function(store,type,payload,id,requestType){this.extractMeta(store,type,payload);var specificExtract="extract"+requestType.charAt(0).toUpperCase()+requestType.substr(1);return this[specificExtract](store,type,payload,id,requestType)},extractFindAll:aliasMethod("extractArray"),extractFindQuery:aliasMethod("extractArray"),extractFindMany:aliasMethod("extractArray"),extractFindHasMany:aliasMethod("extractArray"),extractCreateRecord:aliasMethod("extractSave"),extractUpdateRecord:aliasMethod("extractSave"),extractDeleteRecord:aliasMethod("extractSave"),extractFind:aliasMethod("extractSingle"),extractFindBelongsTo:aliasMethod("extractSingle"),extractSave:aliasMethod("extractSingle"),extractSingle:function(store,type,payload){return this.normalize(type,payload)},extractArray:function(store,type,payload){return this.normalize(type,payload)},extractMeta:function(store,type,payload){payload&&payload.meta&&(store.metaForType(type,payload.meta),delete payload.meta)},transformFor:function(attributeType,skipAssertion){var transform=this.container.lookup("transform:"+attributeType);return Ember.assert("Unable to find transform for '"+attributeType+"'",skipAssertion||!!transform),transform}})}(),function(){var get=Ember.get,capitalize=Ember.String.capitalize,underscore=Ember.String.underscore,DS=window.DS;DS.DebugAdapter=Ember.DataAdapter.extend({getFilters:function(){return[{name:"isNew",desc:"New"},{name:"isModified",desc:"Modified"},{name:"isClean",desc:"Clean"}]},detect:function(klass){return klass!==DS.Model&&DS.Model.detect(klass)},columnsForType:function(type){var columns=[{name:"id",desc:"Id"}],count=0,self=this;return get(type,"attributes").forEach(function(name){if(count++>self.attributeLimit)return!1;var desc=capitalize(underscore(name).replace("_"," "));columns.push({name:name,desc:desc})}),columns},getRecords:function(type){return this.get("store").all(type)},getRecordColumnValues:function(record){var self=this,count=0,columnValues={id:get(record,"id")};return record.eachAttribute(function(key){if(count++>self.attributeLimit)return!1;var value=get(record,key);columnValues[key]=value}),columnValues},getRecordKeywords:function(record){var keywords=[],keys=Ember.A(["id"]);return record.eachAttribute(function(key){keys.push(key)}),keys.forEach(function(key){keywords.push(get(record,key))}),keywords},getRecordFilterValues:function(record){return{isNew:record.get("isNew"),isModified:record.get("isDirty")&&!record.get("isNew"),isClean:!record.get("isDirty")}},getRecordColor:function(record){var color="black";return record.get("isNew")?color="green":record.get("isDirty")&&(color="blue"),color},observeRecord:function(record,recordUpdated){var releaseMethods=Ember.A(),self=this,keysToObserve=Ember.A(["id","isNew","isDirty"]);record.eachAttribute(function(key){keysToObserve.push(key)}),keysToObserve.forEach(function(key){var handler=function(){recordUpdated(self.wrapRecord(record))};Ember.addObserver(record,key,handler),releaseMethods.push(function(){Ember.removeObserver(record,key,handler)})});var release=function(){releaseMethods.forEach(function(fn){fn()})};return release}})}(),function(){DS.Transform=Ember.Object.extend({serialize:Ember.required(),deserialize:Ember.required()})}(),function(){DS.BooleanTransform=DS.Transform.extend({deserialize:function(serialized){var type=typeof serialized;return"boolean"===type?serialized:"string"===type?null!==serialized.match(/^true$|^t$|^1$/i):"number"===type?1===serialized:!1},serialize:function(deserialized){return Boolean(deserialized)}})}(),function(){DS.DateTransform=DS.Transform.extend({deserialize:function(serialized){var type=typeof serialized;return"string"===type?new Date(Ember.Date.parse(serialized)):"number"===type?new Date(serialized):null===serialized||void 0===serialized?serialized:null},serialize:function(date){return date instanceof Date?Number(date):null}})}(),function(){var empty=Ember.isEmpty;DS.NumberTransform=DS.Transform.extend({deserialize:function(serialized){return empty(serialized)?null:Number(serialized)},serialize:function(deserialized){return empty(deserialized)?null:Number(deserialized)}})}(),function(){var none=Ember.isNone;DS.StringTransform=DS.Transform.extend({deserialize:function(serialized){return none(serialized)?null:String(serialized)},serialize:function(deserialized){return none(deserialized)?null:String(deserialized)}})}(),function(){Ember.set;Ember.onLoad("Ember.Application",function(Application){Application.initializer({name:"store",initialize:function(container,application){application.register("store:main",application.Store||DS.Store);var proxy=new DS.ContainerProxy(container);proxy.registerDeprecations([{deprecated:"serializer:_default",valid:"serializer:-default"},{deprecated:"serializer:_rest",valid:"serializer:-rest"},{deprecated:"adapter:_rest",valid:"adapter:-rest"}]),application.register("serializer:-default",DS.JSONSerializer),application.register("serializer:-rest",DS.RESTSerializer),application.register("adapter:-rest",DS.RESTAdapter),container.lookup("store:main")}}),Application.initializer({name:"transforms",before:"store",initialize:function(container,application){application.register("transform:boolean",DS.BooleanTransform),application.register("transform:date",DS.DateTransform),application.register("transform:number",DS.NumberTransform),application.register("transform:string",DS.StringTransform)}}),Application.initializer({name:"data-adapter",before:"store",initialize:function(container,application){application.register("data-adapter:main",DS.DebugAdapter)}}),Application.initializer({name:"injectStore",before:"store",initialize:function(container,application){application.inject("controller","store","store:main"),application.inject("route","store","store:main"),application.inject("serializer","store","store:main"),application.inject("data-adapter","store","store:main")}})})}(),function(){Ember.Date=Ember.Date||{};var origParse=Date.parse,numericKeys=[1,4,5,6,7,10,11];Ember.Date.parse=function(date){var timestamp,struct,minutesOffset=0;if(struct=/^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/.exec(date)){for(var k,i=0;k=numericKeys[i];++i)struct[k]=+struct[k]||0;struct[2]=(+struct[2]||1)-1,struct[3]=+struct[3]||1,"Z"!==struct[8]&&void 0!==struct[9]&&(minutesOffset=60*struct[10]+struct[11],"+"===struct[9]&&(minutesOffset=0-minutesOffset)),timestamp=Date.UTC(struct[1],struct[2],struct[3],struct[4],struct[5]+minutesOffset,struct[6],struct[7])}else timestamp=origParse?origParse(date):0/0;return timestamp},(Ember.EXTEND_PROTOTYPES===!0||Ember.EXTEND_PROTOTYPES.Date)&&(Date.parse=Ember.Date.parse)}(),function(){{var get=Ember.get;Ember.set}DS.RecordArray=Ember.ArrayProxy.extend(Ember.Evented,{type:null,content:null,isLoaded:!1,isUpdating:!1,store:null,objectAtContent:function(index){var content=get(this,"content");return content.objectAt(index)},update:function(){if(!get(this,"isUpdating")){var store=get(this,"store"),type=get(this,"type");return store.fetchAll(type,this)}},addRecord:function(record){get(this,"content").addObject(record)},removeRecord:function(record){get(this,"content").removeObject(record)},save:function(){var promiseLabel="DS: RecordArray#save "+get(this,"type"),promise=Ember.RSVP.all(this.invoke("save"),promiseLabel).then(function(array){return Ember.A(array)},null,"DS: RecordArray#save apply Ember.NativeArray");return DS.PromiseArray.create({promise:promise})}})}(),function(){var get=Ember.get;DS.FilteredRecordArray=DS.RecordArray.extend({filterFunction:null,isLoaded:!0,replace:function(){var type=get(this,"type").toString();throw new Error("The result of a client-side filter (on "+type+") is immutable.")},updateFilter:Ember.observer(function(){var manager=get(this,"manager");manager.updateFilter(this,get(this,"type"),get(this,"filterFunction"))},"filterFunction")})}(),function(){{var get=Ember.get;Ember.set}DS.AdapterPopulatedRecordArray=DS.RecordArray.extend({query:null,replace:function(){var type=get(this,"type").toString();throw new Error("The result of a server query (on "+type+") is immutable.")},load:function(data){var store=get(this,"store"),type=get(this,"type"),records=store.pushMany(type,data),meta=store.metadataFor(type);this.setProperties({content:Ember.A(records),isLoaded:!0,meta:meta}),Ember.run.once(this,"trigger","didLoad")}})}(),function(){var get=Ember.get,set=Ember.set,map=Ember.EnumerableUtils.map;DS.ManyArray=DS.RecordArray.extend({init:function(){this._super.apply(this,arguments),this._changesToSync=Ember.OrderedSet.create()},name:null,owner:null,isPolymorphic:!1,isLoaded:!1,promise:null,loadingRecordsCount:function(count){this.loadingRecordsCount=count},loadedRecord:function(){this.loadingRecordsCount--,0===this.loadingRecordsCount&&(set(this,"isLoaded",!0),this.trigger("didLoad"))},fetch:function(){var records=get(this,"content"),store=get(this,"store"),owner=get(this,"owner"),resolver=Ember.RSVP.defer("DS: ManyArray#fetch "+get(this,"type")),unloadedRecords=records.filterProperty("isEmpty",!0);store.fetchMany(unloadedRecords,owner,resolver)},replaceContent:function(index,removed,added){added=map(added,function(record){return Ember.assert("You cannot add '"+record.constructor.typeKey+"' records to this relationship (only '"+this.type.typeKey+"' allowed)",!this.type||record instanceof this.type),record},this),this._super(index,removed,added)},arrangedContentDidChange:function(){Ember.run.once(this,"fetch")},arrayContentWillChange:function(index,removed){var owner=get(this,"owner"),name=get(this,"name");if(!owner._suspendedRelationships)for(var i=index;index+removed>i;i++){var record=get(this,"content").objectAt(i),change=DS.RelationshipChange.createChange(owner,record,get(this,"store"),{parentType:owner.constructor,changeType:"remove",kind:"hasMany",key:name});this._changesToSync.add(change)}return this._super.apply(this,arguments)},arrayContentDidChange:function(index,removed,added){this._super.apply(this,arguments);var owner=get(this,"owner"),name=get(this,"name"),store=get(this,"store");if(!owner._suspendedRelationships){for(var i=index;index+added>i;i++){var record=get(this,"content").objectAt(i),change=DS.RelationshipChange.createChange(owner,record,store,{parentType:owner.constructor,changeType:"add",kind:"hasMany",key:name});change.hasManyName=name,this._changesToSync.add(change)}this._changesToSync.forEach(function(change){change.sync()}),this._changesToSync.clear()}},createRecord:function(hash){var record,owner=get(this,"owner"),store=get(owner,"store"),type=get(this,"type");return Ember.assert("You cannot add '"+type.typeKey+"' records to this polymorphic relationship.",!get(this,"isPolymorphic")),record=store.createRecord.call(store,type,hash),this.pushObject(record),record}})}(),function(){function normalizeRelationships(store,type,data,record){return type.eachRelationship(function(key,relationship){if(data.links&&data.links[key])return record&&relationship.options.async&&(record._relationships[key]=null),void 0;var kind=relationship.kind,value=data[key];null!=value&&("belongsTo"===kind?deserializeRecordId(store,data,key,relationship,value):"hasMany"===kind&&(deserializeRecordIds(store,data,key,relationship,value),addUnsavedRecords(record,key,value)))}),data}function deserializeRecordId(store,data,key,relationship,id){if(!(isNone(id)||id instanceof DS.Model)){var type;"number"==typeof id||"string"==typeof id?(type=typeFor(relationship,key,data),data[key]=store.recordForId(type,id)):"object"==typeof id&&(data[key]=store.recordForId(id.type,id.id))}}function typeFor(relationship,key,data){return relationship.options.polymorphic?data[key+"Type"]:relationship.type}function deserializeRecordIds(store,data,key,relationship,ids){for(var i=0,l=ids.length;l>i;i++)deserializeRecordId(store,ids,i,relationship,ids[i])}function addUnsavedRecords(record,key,data){record&&data.pushObjects(record.get(key).filterBy("isNew"))}function promiseObject(promise){return DS.PromiseObject.create({promise:promise})}function promiseArray(promise){return DS.PromiseArray.create({promise:promise})}function isThenable(object){return object&&"function"==typeof object.then}function serializerFor(container,type,defaultSerializer){return container.lookup("serializer:"+type)||container.lookup("serializer:application")||container.lookup("serializer:"+defaultSerializer)||container.lookup("serializer:-default")}function defaultSerializer(container){return container.lookup("serializer:application")||container.lookup("serializer:-default")}function serializerForAdapter(adapter,type){var serializer=adapter.serializer,defaultSerializer=adapter.defaultSerializer,container=adapter.container;return container&&void 0===serializer&&(serializer=serializerFor(container,type.typeKey,defaultSerializer)),(null===serializer||void 0===serializer)&&(serializer={extract:function(store,type,payload){return payload}}),serializer}function _find(adapter,store,type,id){var promise=adapter.find(store,type,id),serializer=serializerForAdapter(adapter,type);return resolve(promise,"DS: Handle Adapter#find of "+type+" with id: "+id).then(function(payload){return Ember.assert("You made a request for a "+type.typeKey+" with id "+id+", but the adapter's response did not have any data",payload),payload=serializer.extract(store,type,payload,id,"find"),store.push(type,payload)},function(error){var record=store.getById(type,id);throw record.notFound(),error},"DS: Extract payload of '"+type+"'")}function _findMany(adapter,store,type,ids,owner){var promise=adapter.findMany(store,type,ids,owner),serializer=serializerForAdapter(adapter,type);return resolve(promise,"DS: Handle Adapter#findMany of "+type).then(function(payload){payload=serializer.extract(store,type,payload,null,"findMany"),Ember.assert("The response from a findMany must be an Array, not "+Ember.inspect(payload),"array"===Ember.typeOf(payload)),store.pushMany(type,payload)},null,"DS: Extract payload of "+type)}function _findHasMany(adapter,store,record,link,relationship){var promise=adapter.findHasMany(store,record,link,relationship),serializer=serializerForAdapter(adapter,relationship.type);return resolve(promise,"DS: Handle Adapter#findHasMany of "+record+" : "+relationship.type).then(function(payload){payload=serializer.extract(store,relationship.type,payload,null,"findHasMany"),Ember.assert("The response from a findHasMany must be an Array, not "+Ember.inspect(payload),"array"===Ember.typeOf(payload));var records=store.pushMany(relationship.type,payload);record.updateHasMany(relationship.key,records)},null,"DS: Extract payload of "+record+" : hasMany "+relationship.type)}function _findBelongsTo(adapter,store,record,link,relationship){var promise=adapter.findBelongsTo(store,record,link,relationship),serializer=serializerForAdapter(adapter,relationship.type);return resolve(promise,"DS: Handle Adapter#findBelongsTo of "+record+" : "+relationship.type).then(function(payload){payload=serializer.extract(store,relationship.type,payload,null,"findBelongsTo");var record=store.push(relationship.type,payload);return record.updateBelongsTo(relationship.key,record),record},null,"DS: Extract payload of "+record+" : "+relationship.type)}function _findAll(adapter,store,type,sinceToken){var promise=adapter.findAll(store,type,sinceToken),serializer=serializerForAdapter(adapter,type);return resolve(promise,"DS: Handle Adapter#findAll of "+type).then(function(payload){return payload=serializer.extract(store,type,payload,null,"findAll"),Ember.assert("The response from a findAll must be an Array, not "+Ember.inspect(payload),"array"===Ember.typeOf(payload)),store.pushMany(type,payload),store.didUpdateAll(type),store.all(type)},null,"DS: Extract payload of findAll "+type)}function _findQuery(adapter,store,type,query,recordArray){var promise=adapter.findQuery(store,type,query,recordArray),serializer=serializerForAdapter(adapter,type);return resolve(promise,"DS: Handle Adapter#findQuery of "+type).then(function(payload){return payload=serializer.extract(store,type,payload,null,"findQuery"),Ember.assert("The response from a findQuery must be an Array, not "+Ember.inspect(payload),"array"===Ember.typeOf(payload)),recordArray.load(payload),recordArray},null,"DS: Extract payload of findQuery "+type)}function _commit(adapter,store,operation,record){var type=record.constructor,promise=adapter[operation](store,type,record),serializer=serializerForAdapter(adapter,type);return Ember.assert("Your adapter's '"+operation+"' method must return a promise, but it returned "+promise,isThenable(promise)),promise.then(function(payload){return payload&&(payload=serializer.extract(store,type,payload,get(record,"id"),operation)),store.didSaveRecord(record,payload),record},function(reason){throw reason instanceof DS.InvalidError?store.recordWasInvalid(record,reason.errors):store.recordWasError(record,reason),reason},"DS: Extract and notify about "+operation+" completion of "+record)}var get=Ember.get,set=Ember.set,once=Ember.run.once,isNone=Ember.isNone,forEach=Ember.EnumerableUtils.forEach,indexOf=Ember.EnumerableUtils.indexOf,map=Ember.EnumerableUtils.map,resolve=Ember.RSVP.resolve,copy=Ember.copy,coerceId=function(id){return null==id?null:id+""};DS.Store=Ember.Object.extend({init:function(){this.typeMaps={},this.recordArrayManager=DS.RecordArrayManager.create({store:this}),this._relationshipChanges={},this._pendingSave=[]},adapter:"-rest",serialize:function(record,options){return this.serializerFor(record.constructor.typeKey).serialize(record,options)},defaultAdapter:Ember.computed("adapter",function(){var adapter=get(this,"adapter");return Ember.assert("You tried to set `adapter` property to an instance of `DS.Adapter`, where it should be a name or a factory",!(adapter instanceof DS.Adapter)),"string"==typeof adapter&&(adapter=this.container.lookup("adapter:"+adapter)||this.container.lookup("adapter:application")||this.container.lookup("adapter:-rest")),DS.Adapter.detect(adapter)&&(adapter=adapter.create({container:this.container})),adapter}),createRecord:function(type,properties){type=this.modelFor(type),properties=copy(properties)||{},isNone(properties.id)&&(properties.id=this._generateId(type)),properties.id=coerceId(properties.id);var record=this.buildRecord(type,properties.id);return record.loadedData(),record.setProperties(properties),record},_generateId:function(type){var adapter=this.adapterFor(type);return adapter&&adapter.generateIdForRecord?adapter.generateIdForRecord(this):null},deleteRecord:function(record){record.deleteRecord()},unloadRecord:function(record){record.unloadRecord()},find:function(type,id){return void 0===id?this.findAll(type):"object"===Ember.typeOf(id)?this.findQuery(type,id):this.findById(type,coerceId(id))},findById:function(type,id){type=this.modelFor(type);var record=this.recordForId(type,id),promise=this.fetchRecord(record)||resolve(record,"DS: Store#findById "+type+" with id: "+id);return promiseObject(promise)},findByIds:function(type,ids){var store=this;return promiseArray(Ember.RSVP.all(map(ids,function(id){return store.findById(type,id)})).then(Ember.A,null,"DS: Store#findByIds of "+type+" complete"))},fetchRecord:function(record){if(isNone(record))return null;if(record._loadingPromise)return record._loadingPromise;if(!get(record,"isEmpty"))return null;var type=record.constructor,id=get(record,"id"),adapter=this.adapterFor(type);Ember.assert("You tried to find a record but you have no adapter (for "+type+")",adapter),Ember.assert("You tried to find a record but your adapter (for "+type+") does not implement 'find'",adapter.find);var promise=_find(adapter,this,type,id);return record.loadingData(promise),promise},getById:function(type,id){return this.hasRecordForId(type,id)?this.recordForId(type,id):null},reloadRecord:function(record){var type=record.constructor,adapter=this.adapterFor(type),id=get(record,"id");return Ember.assert("You cannot reload a record without an ID",id),Ember.assert("You tried to reload a record but you have no adapter (for "+type+")",adapter),Ember.assert("You tried to reload a record but your adapter does not implement `find`",adapter.find),_find(adapter,this,type,id)},fetchMany:function(records,owner,resolver){if(records.length){var recordsByTypeMap=Ember.MapWithDefault.create({defaultValue:function(){return Ember.A()}});forEach(records,function(record){recordsByTypeMap.get(record.constructor).push(record)}),forEach(recordsByTypeMap,function(type,records){var ids=records.mapProperty("id"),adapter=this.adapterFor(type);Ember.assert("You tried to load many records but you have no adapter (for "+type+")",adapter),Ember.assert("You tried to load many records but your adapter does not implement `findMany`",adapter.findMany),resolver.resolve(_findMany(adapter,this,type,ids,owner))},this)}},hasRecordForId:function(type,id){return id=coerceId(id),type=this.modelFor(type),!!this.typeMapFor(type).idToRecord[id]},recordForId:function(type,id){type=this.modelFor(type),id=coerceId(id);var record=this.typeMapFor(type).idToRecord[id];return record||(record=this.buildRecord(type,id)),record},findMany:function(owner,records,type,resolver){type=this.modelFor(type),records=Ember.A(records);var unloadedRecords=records.filterProperty("isEmpty",!0),manyArray=this.recordArrayManager.createManyArray(type,records);return forEach(unloadedRecords,function(record){record.loadingData()}),manyArray.loadingRecordsCount=unloadedRecords.length,unloadedRecords.length?(forEach(unloadedRecords,function(record){this.recordArrayManager.registerWaitingRecordArray(record,manyArray)},this),this.fetchMany(unloadedRecords,owner,resolver)):(resolver&&resolver.resolve(),manyArray.set("isLoaded",!0),Ember.run.once(manyArray,"trigger","didLoad")),manyArray},findHasMany:function(owner,link,relationship,resolver){var adapter=this.adapterFor(owner.constructor);Ember.assert("You tried to load a hasMany relationship but you have no adapter (for "+owner.constructor+")",adapter),Ember.assert("You tried to load a hasMany relationship from a specified `link` in the original payload but your adapter does not implement `findHasMany`",adapter.findHasMany);var records=this.recordArrayManager.createManyArray(relationship.type,Ember.A([]));return resolver.resolve(_findHasMany(adapter,this,owner,link,relationship)),records},findBelongsTo:function(owner,link,relationship,resolver){var adapter=this.adapterFor(owner.constructor);Ember.assert("You tried to load a belongsTo relationship but you have no adapter (for "+owner.constructor+")",adapter),Ember.assert("You tried to load a belongsTo relationship from a specified `link` in the original payload but your adapter does not implement `findBelongsTo`",adapter.findBelongsTo),resolver.resolve(_findBelongsTo(adapter,this,owner,link,relationship))},findQuery:function(type,query){type=this.modelFor(type);var array=this.recordArrayManager.createAdapterPopulatedRecordArray(type,query),adapter=this.adapterFor(type),promiseLabel="DS: Store#findQuery "+type,resolver=Ember.RSVP.defer(promiseLabel);return Ember.assert("You tried to load a query but you have no adapter (for "+type+")",adapter),Ember.assert("You tried to load a query but your adapter does not implement `findQuery`",adapter.findQuery),resolver.resolve(_findQuery(adapter,this,type,query,array)),promiseArray(resolver.promise)},findAll:function(type){return type=this.modelFor(type),this.fetchAll(type,this.all(type))},fetchAll:function(type,array){var adapter=this.adapterFor(type),sinceToken=this.typeMapFor(type).metadata.since;return set(array,"isUpdating",!0),Ember.assert("You tried to load all records but you have no adapter (for "+type+")",adapter),Ember.assert("You tried to load all records but your adapter does not implement `findAll`",adapter.findAll),promiseArray(_findAll(adapter,this,type,sinceToken))},didUpdateAll:function(type){var findAllCache=this.typeMapFor(type).findAllCache;set(findAllCache,"isUpdating",!1)},all:function(type){type=this.modelFor(type);var typeMap=this.typeMapFor(type),findAllCache=typeMap.findAllCache;if(findAllCache)return findAllCache;var array=this.recordArrayManager.createRecordArray(type);return typeMap.findAllCache=array,array},unloadAll:function(type){type=this.modelFor(type);for(var record,typeMap=this.typeMapFor(type),records=typeMap.records.splice(0);record=records.pop();)record.unloadRecord();typeMap.findAllCache=null},filter:function(type,query,filter){var promise;3===arguments.length?promise=this.findQuery(type,query):2===arguments.length&&(filter=query),type=this.modelFor(type);var array=this.recordArrayManager.createFilteredRecordArray(type,filter);return promise=promise||resolve(array),promiseArray(promise.then(function(){return array},null,"DS: Store#filter of "+type))},recordIsLoaded:function(type,id){return this.hasRecordForId(type,id)?!get(this.recordForId(type,id),"isEmpty"):!1},metadataFor:function(type){return type=this.modelFor(type),this.typeMapFor(type).metadata},dataWasUpdated:function(type,record){this.recordArrayManager.recordDidChange(record)},scheduleSave:function(record,resolver){record.adapterWillCommit(),this._pendingSave.push([record,resolver]),once(this,"flushPendingSave")},flushPendingSave:function(){var pending=this._pendingSave.slice();this._pendingSave=[],forEach(pending,function(tuple){var operation,record=tuple[0],resolver=tuple[1],adapter=this.adapterFor(record.constructor);operation=get(record,"isNew")?"createRecord":get(record,"isDeleted")?"deleteRecord":"updateRecord",resolver.resolve(_commit(adapter,this,operation,record))},this)},didSaveRecord:function(record,data){data&&(data=normalizeRelationships(this,record.constructor,data,record),this.updateId(record,data)),record.adapterDidCommit(data)},recordWasInvalid:function(record,errors){record.adapterDidInvalidate(errors)},recordWasError:function(record){record.adapterDidError()},updateId:function(record,data){var oldId=get(record,"id"),id=coerceId(data.id);Ember.assert("An adapter cannot assign a new id to a record that already has an id. "+record+" had id: "+oldId+" and you tried to update it with "+id+". This likely happened because your server returned data in response to a find or update that had a different id than the one you sent.",null===oldId||id===oldId),this.typeMapFor(record.constructor).idToRecord[id]=record,set(record,"id",id)},typeMapFor:function(type){var typeMap,typeMaps=get(this,"typeMaps"),guid=Ember.guidFor(type);return(typeMap=typeMaps[guid])?typeMap:(typeMap={idToRecord:{},records:[],metadata:{}},typeMaps[guid]=typeMap,typeMap)},_load:function(type,data,partial){var id=coerceId(data.id),record=this.recordForId(type,id);return record.setupData(data,partial),this.recordArrayManager.recordDidChange(record),record},modelFor:function(key){var factory;if("string"==typeof key){var normalizedKey=this.container.normalize("model:"+key);if(factory=this.container.lookupFactory(normalizedKey),!factory)throw new Ember.Error("No model was found for '"+key+"'");factory.typeKey=normalizedKey.split(":",2)[1]}else factory=key;return factory.store=this,factory},push:function(type,data,_partial){return Ember.assert("You must include an `id` in a hash passed to `push`",null!=data.id),type=this.modelFor(type),data=normalizeRelationships(this,type,data),this._load(type,data,_partial),this.recordForId(type,data.id)},pushPayload:function(type,payload){var serializer;payload?serializer=this.serializerFor(type):(payload=type,serializer=defaultSerializer(this.container),Ember.assert("You cannot use `store#pushPayload` without a type unless your default serializer defines `pushPayload`",serializer.pushPayload)),serializer.pushPayload(this,payload)},update:function(type,data){return Ember.assert("You must include an `id` in a hash passed to `update`",null!=data.id),this.push(type,data,!0)},pushMany:function(type,datas){return map(datas,function(data){return this.push(type,data)},this)},metaForType:function(type,metadata){type=this.modelFor(type),Ember.merge(this.typeMapFor(type).metadata,metadata)},buildRecord:function(type,id,data){var typeMap=this.typeMapFor(type),idToRecord=typeMap.idToRecord;Ember.assert("The id "+id+" has already been used with another record of type "+type.toString()+".",!id||!idToRecord[id]);var record=type._create({id:id,store:this,container:this.container});
return data&&record.setupData(data),id&&(idToRecord[id]=record),typeMap.records.push(record),record},dematerializeRecord:function(record){var type=record.constructor,typeMap=this.typeMapFor(type),id=get(record,"id");record.updateRecordArrays(),id&&delete typeMap.idToRecord[id];var loc=indexOf(typeMap.records,record);typeMap.records.splice(loc,1)},addRelationshipChangeFor:function(childRecord,childKey,parentRecord,parentKey,change){var clientId=childRecord.clientId,parentClientId=parentRecord?parentRecord:parentRecord,key=childKey+parentKey,changes=this._relationshipChanges;clientId in changes||(changes[clientId]={}),parentClientId in changes[clientId]||(changes[clientId][parentClientId]={}),key in changes[clientId][parentClientId]||(changes[clientId][parentClientId][key]={}),changes[clientId][parentClientId][key][change.changeType]=change},removeRelationshipChangeFor:function(clientRecord,childKey,parentRecord,parentKey,type){var clientId=clientRecord.clientId,parentClientId=parentRecord?parentRecord.clientId:parentRecord,changes=this._relationshipChanges,key=childKey+parentKey;clientId in changes&&parentClientId in changes[clientId]&&key in changes[clientId][parentClientId]&&delete changes[clientId][parentClientId][key][type]},relationshipChangePairsFor:function(record){var toReturn=[];if(!record)return toReturn;var changesObject=this._relationshipChanges[record.clientId];for(var objKey in changesObject)if(changesObject.hasOwnProperty(objKey))for(var changeKey in changesObject[objKey])changesObject[objKey].hasOwnProperty(changeKey)&&toReturn.push(changesObject[objKey][changeKey]);return toReturn},adapterFor:function(type){var adapter,container=this.container;return container&&(adapter=container.lookup("adapter:"+type.typeKey)||container.lookup("adapter:application")),adapter||get(this,"defaultAdapter")},serializerFor:function(type){type=this.modelFor(type);var adapter=this.adapterFor(type);return serializerFor(this.container,type.typeKey,adapter&&adapter.defaultSerializer)}}),DS.PromiseArray=Ember.ArrayProxy.extend(Ember.PromiseProxyMixin),DS.PromiseObject=Ember.ObjectProxy.extend(Ember.PromiseProxyMixin)}(),function(){function deepClone(object){var value,clone={};for(var prop in object)value=object[prop],clone[prop]=value&&"object"==typeof value?deepClone(value):value;return clone}function mixin(original,hash){for(var prop in hash)original[prop]=hash[prop];return original}function dirtyState(options){var newState=deepClone(DirtyState);return mixin(newState,options)}function wireState(object,parent,name){object=mixin(parent?Ember.create(parent):{},object),object.parentState=parent,object.stateName=name;for(var prop in object)object.hasOwnProperty(prop)&&"parentState"!==prop&&"stateName"!==prop&&"object"==typeof object[prop]&&(object[prop]=wireState(object[prop],object,name+"."+prop));return object}var get=Ember.get,set=Ember.set,didSetProperty=function(record,context){context.value===context.originalValue?(delete record._attributes[context.name],record.send("propertyWasReset",context.name)):context.value!==context.oldValue&&record.send("becomeDirty"),record.updateRecordArraysLater()},DirtyState={initialState:"uncommitted",isDirty:!0,uncommitted:{didSetProperty:didSetProperty,propertyWasReset:function(record){var stillDirty=!1;for(var prop in record._attributes){stillDirty=!0;break}stillDirty||record.send("rolledBack")},pushedData:Ember.K,becomeDirty:Ember.K,willCommit:function(record){record.transitionTo("inFlight")},reloadRecord:function(record,resolve){resolve(get(record,"store").reloadRecord(record))},rolledBack:function(record){record.transitionTo("loaded.saved")},becameInvalid:function(record){record.transitionTo("invalid")},rollback:function(record){record.rollback()}},inFlight:{isSaving:!0,didSetProperty:didSetProperty,becomeDirty:Ember.K,pushedData:Ember.K,willCommit:Ember.K,didCommit:function(record){var dirtyType=get(this,"dirtyType");record.transitionTo("saved"),record.send("invokeLifecycleCallbacks",dirtyType)},becameInvalid:function(record){record.transitionTo("invalid"),record.send("invokeLifecycleCallbacks")},becameError:function(record){record.transitionTo("uncommitted"),record.triggerLater("becameError",record)}},invalid:{isValid:!1,deleteRecord:function(record){record.transitionTo("deleted.uncommitted"),record.clearRelationships()},didSetProperty:function(record,context){get(record,"errors").remove(context.name),didSetProperty(record,context)},becomeDirty:Ember.K,rolledBack:function(record){get(record,"errors").clear()},becameValid:function(record){record.transitionTo("uncommitted")},invokeLifecycleCallbacks:function(record){record.triggerLater("becameInvalid",record)}}},createdState=dirtyState({dirtyType:"created",isNew:!0});createdState.uncommitted.rolledBack=function(record){record.transitionTo("deleted.saved")};var updatedState=dirtyState({dirtyType:"updated"});createdState.uncommitted.deleteRecord=function(record){record.clearRelationships(),record.transitionTo("deleted.saved")},createdState.uncommitted.rollback=function(record){DirtyState.uncommitted.rollback.apply(this,arguments),record.transitionTo("deleted.saved")},createdState.uncommitted.propertyWasReset=Ember.K,updatedState.uncommitted.deleteRecord=function(record){record.transitionTo("deleted.uncommitted"),record.clearRelationships()};var RootState={isEmpty:!1,isLoading:!1,isLoaded:!1,isDirty:!1,isSaving:!1,isDeleted:!1,isNew:!1,isValid:!0,rolledBack:Ember.K,propertyWasReset:Ember.K,empty:{isEmpty:!0,loadingData:function(record,promise){record._loadingPromise=promise,record.transitionTo("loading")},loadedData:function(record){record.transitionTo("loaded.created.uncommitted"),record.suspendRelationshipObservers(function(){record.notifyPropertyChange("data")})},pushedData:function(record){record.transitionTo("loaded.saved"),record.triggerLater("didLoad")}},loading:{isLoading:!0,exit:function(record){record._loadingPromise=null},pushedData:function(record){record.transitionTo("loaded.saved"),record.triggerLater("didLoad"),set(record,"isError",!1)},becameError:function(record){record.triggerLater("becameError",record)},notFound:function(record){record.transitionTo("empty")}},loaded:{initialState:"saved",isLoaded:!0,saved:{setup:function(record){var attrs=record._attributes,isDirty=!1;for(var prop in attrs)if(attrs.hasOwnProperty(prop)){isDirty=!0;break}isDirty&&record.adapterDidDirty()},didSetProperty:didSetProperty,pushedData:Ember.K,becomeDirty:function(record){record.transitionTo("updated.uncommitted")},willCommit:function(record){record.transitionTo("updated.inFlight")},reloadRecord:function(record,resolve){resolve(get(record,"store").reloadRecord(record))},deleteRecord:function(record){record.transitionTo("deleted.uncommitted"),record.clearRelationships()},unloadRecord:function(record){record.clearRelationships(),record.transitionTo("deleted.saved")},didCommit:function(record){record.send("invokeLifecycleCallbacks",get(record,"lastDirtyType"))},notFound:Ember.K},created:createdState,updated:updatedState},deleted:{initialState:"uncommitted",dirtyType:"deleted",isDeleted:!0,isLoaded:!0,isDirty:!0,setup:function(record){record.updateRecordArrays()},uncommitted:{willCommit:function(record){record.transitionTo("inFlight")},rollback:function(record){record.rollback()},becomeDirty:Ember.K,deleteRecord:Ember.K,rolledBack:function(record){record.transitionTo("loaded.saved")}},inFlight:{isSaving:!0,willCommit:Ember.K,didCommit:function(record){record.transitionTo("saved"),record.send("invokeLifecycleCallbacks")},becameError:function(record){record.transitionTo("uncommitted"),record.triggerLater("becameError",record)}},saved:{isDirty:!1,setup:function(record){var store=get(record,"store");store.dematerializeRecord(record)},invokeLifecycleCallbacks:function(record){record.triggerLater("didDelete",record),record.triggerLater("didCommit",record)}}},invokeLifecycleCallbacks:function(record,dirtyType){"created"===dirtyType?record.triggerLater("didCreate",record):record.triggerLater("didUpdate",record),record.triggerLater("didCommit",record)}};RootState=wireState(RootState,null,"root"),DS.RootState=RootState}(),function(){var get=Ember.get,isEmpty=Ember.isEmpty;DS.Errors=Ember.Object.extend(Ember.Enumerable,Ember.Evented,{registerHandlers:function(target,becameInvalid,becameValid){this.on("becameInvalid",target,becameInvalid),this.on("becameValid",target,becameValid)},errorsByAttributeName:Ember.reduceComputed("content",{initialValue:function(){return Ember.MapWithDefault.create({defaultValue:function(){return Ember.A()}})},addedItem:function(errors,error){return errors.get(error.attribute).pushObject(error),errors},removedItem:function(errors,error){return errors.get(error.attribute).removeObject(error),errors}}),errorsFor:function(attribute){return get(this,"errorsByAttributeName").get(attribute)},messages:Ember.computed.mapBy("content","message"),content:Ember.computed(function(){return Ember.A()}),unknownProperty:function(attribute){var errors=this.errorsFor(attribute);return isEmpty(errors)?null:errors},nextObject:function(index){return get(this,"content").objectAt(index)},length:Ember.computed.oneWay("content.length").readOnly(),isEmpty:Ember.computed.not("length").readOnly(),add:function(attribute,messages){var wasEmpty=get(this,"isEmpty");messages=this._findOrCreateMessages(attribute,messages),get(this,"content").addObjects(messages),this.notifyPropertyChange(attribute),this.enumerableContentDidChange(),wasEmpty&&!get(this,"isEmpty")&&this.trigger("becameInvalid")},_findOrCreateMessages:function(attribute,messages){var errors=this.errorsFor(attribute);return Ember.makeArray(messages).map(function(message){return errors.findBy("message",message)||{attribute:attribute,message:message}})},remove:function(attribute){if(!get(this,"isEmpty")){var content=get(this,"content").rejectBy("attribute",attribute);get(this,"content").setObjects(content),this.notifyPropertyChange(attribute),this.enumerableContentDidChange(),get(this,"isEmpty")&&this.trigger("becameValid")}},clear:function(){get(this,"isEmpty")||(get(this,"content").clear(),this.enumerableContentDidChange(),this.trigger("becameValid"))},has:function(attribute){return!isEmpty(this.errorsFor(attribute))}})}(),function(){var get=Ember.get,set=Ember.set,merge=Ember.merge,retrieveFromCurrentState=Ember.computed("currentState",function(key){return get(get(this,"currentState"),key)}).readOnly();DS.Model=Ember.Object.extend(Ember.Evented,{isEmpty:retrieveFromCurrentState,isLoading:retrieveFromCurrentState,isLoaded:retrieveFromCurrentState,isDirty:retrieveFromCurrentState,isSaving:retrieveFromCurrentState,isDeleted:retrieveFromCurrentState,isNew:retrieveFromCurrentState,isValid:retrieveFromCurrentState,dirtyType:retrieveFromCurrentState,isError:!1,isReloading:!1,clientId:null,id:null,transaction:null,currentState:null,errors:null,serialize:function(options){var store=get(this,"store");return store.serialize(this,options)},toJSON:function(options){var serializer=DS.JSONSerializer.create({container:this.container});return serializer.serialize(this,options)},didLoad:Ember.K,didUpdate:Ember.K,didCreate:Ember.K,didDelete:Ember.K,becameInvalid:Ember.K,becameError:Ember.K,data:Ember.computed(function(){return this._data=this._data||{},this._data}).property(),_data:null,init:function(){set(this,"currentState",DS.RootState.empty);var errors=DS.Errors.create();errors.registerHandlers(this,function(){this.send("becameInvalid")},function(){this.send("becameValid")}),set(this,"errors",errors),this._super(),this._setup()},_setup:function(){this._changesToSync={},this._deferredTriggers=[],this._data={},this._attributes={},this._inFlightAttributes={},this._relationships={}},send:function(name,context){var currentState=get(this,"currentState");return currentState[name]||this._unhandledEvent(currentState,name,context),currentState[name](this,context)},transitionTo:function(name){var pivotName=name.split(".",1),currentState=get(this,"currentState"),state=currentState;do state.exit&&state.exit(this),state=state.parentState;while(!state.hasOwnProperty(pivotName));var i,l,path=name.split("."),setups=[],enters=[];for(i=0,l=path.length;l>i;i++)state=state[path[i]],state.enter&&enters.push(state),state.setup&&setups.push(state);for(i=0,l=enters.length;l>i;i++)enters[i].enter(this);for(set(this,"currentState",state),i=0,l=setups.length;l>i;i++)setups[i].setup(this);this.updateRecordArraysLater()},_unhandledEvent:function(state,name,context){var errorMessage="Attempted to handle event `"+name+"` ";throw errorMessage+="on "+String(this)+" while in state ",errorMessage+=state.stateName+". ",void 0!==context&&(errorMessage+="Called with "+Ember.inspect(context)+"."),new Ember.Error(errorMessage)},withTransaction:function(fn){var transaction=get(this,"transaction");transaction&&fn(transaction)},loadingData:function(promise){this.send("loadingData",promise)},loadedData:function(){this.send("loadedData")},notFound:function(){this.send("notFound")},pushedData:function(){this.send("pushedData")},deleteRecord:function(){this.send("deleteRecord")},destroyRecord:function(){return this.deleteRecord(),this.save()},unloadRecord:function(){Ember.assert("You can only unload a loaded, non-dirty record.",!get(this,"isDirty")),this.send("unloadRecord")},clearRelationships:function(){this.eachRelationship(function(name,relationship){if("belongsTo"===relationship.kind)set(this,name,null);else if("hasMany"===relationship.kind){var hasMany=this._relationships[relationship.name];hasMany&&hasMany.clear()}},this)},updateRecordArrays:function(){this._updatingRecordArraysLater=!1,get(this,"store").dataWasUpdated(this.constructor,this)},changedAttributes:function(){var prop,oldData=get(this,"_data"),newData=get(this,"_attributes"),diffData={};for(prop in newData)diffData[prop]=[oldData[prop],newData[prop]];return diffData},adapterWillCommit:function(){this.send("willCommit")},adapterDidCommit:function(data){set(this,"isError",!1),data?this._data=data:Ember.mixin(this._data,this._inFlightAttributes),this._inFlightAttributes={},this.send("didCommit"),this.updateRecordArraysLater(),data&&this.suspendRelationshipObservers(function(){this.notifyPropertyChange("data")})},adapterDidDirty:function(){this.send("becomeDirty"),this.updateRecordArraysLater()},dataDidChange:Ember.observer(function(){this.reloadHasManys()},"data"),reloadHasManys:function(){var relationships=get(this.constructor,"relationshipsByName");this.updateRecordArraysLater(),relationships.forEach(function(name,relationship){this._data.links&&this._data.links[name]||"hasMany"===relationship.kind&&this.hasManyDidChange(relationship.key)},this)},hasManyDidChange:function(key){var hasMany=this._relationships[key];if(hasMany){var records=this._data[key]||[];set(hasMany,"content",Ember.A(records)),set(hasMany,"isLoaded",!0),hasMany.trigger("didLoad")}},updateRecordArraysLater:function(){this._updatingRecordArraysLater||(this._updatingRecordArraysLater=!0,Ember.run.schedule("actions",this,this.updateRecordArrays))},setupData:function(data,partial){partial?Ember.merge(this._data,data):this._data=data;var relationships=this._relationships;this.eachRelationship(function(name,rel){data.links&&data.links[name]||rel.options.async&&(relationships[name]=null)}),data&&this.pushedData(),this.suspendRelationshipObservers(function(){this.notifyPropertyChange("data")})},materializeId:function(id){set(this,"id",id)},materializeAttributes:function(attributes){Ember.assert("Must pass a hash of attributes to materializeAttributes",!!attributes),merge(this._data,attributes)},materializeAttribute:function(name,value){this._data[name]=value},updateHasMany:function(name,records){this._data[name]=records,this.hasManyDidChange(name)},updateBelongsTo:function(name,record){this._data[name]=record},rollback:function(){this._attributes={},get(this,"isError")&&(this._inFlightAttributes={},set(this,"isError",!1)),get(this,"isValid")||(this._inFlightAttributes={}),this.send("rolledBack"),this.suspendRelationshipObservers(function(){this.notifyPropertyChange("data")})},toStringExtension:function(){return get(this,"id")},suspendRelationshipObservers:function(callback,binding){var observers=get(this.constructor,"relationshipNames").belongsTo,self=this;try{this._suspendedRelationships=!0,Ember._suspendObservers(self,observers,null,"belongsToDidChange",function(){Ember._suspendBeforeObservers(self,observers,null,"belongsToWillChange",function(){callback.call(binding||self)})})}finally{this._suspendedRelationships=!1}},save:function(){var promiseLabel="DS: Model#save "+this,resolver=Ember.RSVP.defer(promiseLabel);return this.get("store").scheduleSave(this,resolver),this._inFlightAttributes=this._attributes,this._attributes={},DS.PromiseObject.create({promise:resolver.promise})},reload:function(){set(this,"isReloading",!0);var record=this,promiseLabel="DS: Model#reload of "+this,promise=new Ember.RSVP.Promise(function(resolve){record.send("reloadRecord",resolve)},promiseLabel).then(function(){return record.set("isReloading",!1),record.set("isError",!1),record},function(reason){throw record.set("isError",!0),reason},"DS: Model#reload complete, update flags");return DS.PromiseObject.create({promise:promise})},adapterDidUpdateAttribute:function(attributeName,value){void 0!==value?(this._data[attributeName]=value,this.notifyPropertyChange(attributeName)):this._data[attributeName]=this._inFlightAttributes[attributeName],this.updateRecordArraysLater()},adapterDidInvalidate:function(errors){function addError(name){errors[name]&&recordErrors.add(name,errors[name])}var recordErrors=get(this,"errors");this.eachAttribute(addError),this.eachRelationship(addError)},adapterDidError:function(){this.send("becameError"),set(this,"isError",!0)},trigger:function(name){Ember.tryInvoke(this,name,[].slice.call(arguments,1)),this._super.apply(this,arguments)},triggerLater:function(){1===this._deferredTriggers.push(arguments)&&Ember.run.schedule("actions",this,"_triggerDeferredTriggers")},_triggerDeferredTriggers:function(){for(var i=0,l=this._deferredTriggers.length;l>i;i++)this.trigger.apply(this,this._deferredTriggers[i]);this._deferredTriggers.length=0}}),DS.Model.reopenClass({_create:DS.Model.create,create:function(){throw new Ember.Error("You should not call `create` on a model. Instead, call `store.createRecord` with the attributes you would like to set.")}})}(),function(){function getDefaultValue(record,options){return"function"==typeof options.defaultValue?options.defaultValue():options.defaultValue}function hasValue(record,key){return record._attributes.hasOwnProperty(key)||record._inFlightAttributes.hasOwnProperty(key)||record._data.hasOwnProperty(key)}function getValue(record,key){return record._attributes.hasOwnProperty(key)?record._attributes[key]:record._inFlightAttributes.hasOwnProperty(key)?record._inFlightAttributes[key]:record._data[key]}var get=Ember.get;DS.Model.reopenClass({attributes:Ember.computed(function(){var map=Ember.Map.create();return this.eachComputedProperty(function(name,meta){meta.isAttribute&&(Ember.assert("You may not set `id` as an attribute on your model. Please remove any lines that look like: `id: DS.attr('<type>')` from "+this.toString(),"id"!==name),meta.name=name,map.set(name,meta))}),map}),transformedAttributes:Ember.computed(function(){var map=Ember.Map.create();return this.eachAttribute(function(key,meta){meta.type&&map.set(key,meta.type)}),map}),eachAttribute:function(callback,binding){get(this,"attributes").forEach(function(name,meta){callback.call(binding,name,meta)},binding)},eachTransformedAttribute:function(callback,binding){get(this,"transformedAttributes").forEach(function(name,type){callback.call(binding,name,type)})}}),DS.Model.reopen({eachAttribute:function(callback,binding){this.constructor.eachAttribute(callback,binding)}}),DS.attr=function(type,options){options=options||{};var meta={type:type,isAttribute:!0,options:options};return Ember.computed(function(key,value){if(arguments.length>1){Ember.assert("You may not set `id` as an attribute on your model. Please remove any lines that look like: `id: DS.attr('<type>')` from "+this.constructor.toString(),"id"!==key);var oldValue=this._attributes[key]||this._inFlightAttributes[key]||this._data[key];return this.send("didSetProperty",{name:key,oldValue:oldValue,originalValue:this._data[key],value:value}),this._attributes[key]=value,value}return hasValue(this,key)?getValue(this,key):getDefaultValue(this,options,key)}).property("data").meta(meta)}}(),function(){var AttributeChange=DS.AttributeChange=function(options){this.record=options.record,this.store=options.store,this.name=options.name,this.value=options.value,this.oldValue=options.oldValue};AttributeChange.createChange=function(options){return new AttributeChange(options)},AttributeChange.prototype={sync:function(){this.value!==this.oldValue&&(this.record.send("becomeDirty"),this.record.updateRecordArraysLater()),this.destroy()},destroy:function(){delete this.record._changesToSync[this.name]}}}(),function(){function isValue(object){return"object"==typeof object&&(!object.then||"function"!=typeof object.then)}var get=Ember.get,set=Ember.set,forEach=Ember.EnumerableUtils.forEach;DS.RelationshipChange=function(options){this.parentRecord=options.parentRecord,this.childRecord=options.childRecord,this.firstRecord=options.firstRecord,this.firstRecordKind=options.firstRecordKind,this.firstRecordName=options.firstRecordName,this.secondRecord=options.secondRecord,this.secondRecordKind=options.secondRecordKind,this.secondRecordName=options.secondRecordName,this.changeType=options.changeType,this.store=options.store,this.committed={}},DS.RelationshipChangeAdd=function(options){DS.RelationshipChange.call(this,options)},DS.RelationshipChangeRemove=function(options){DS.RelationshipChange.call(this,options)},DS.RelationshipChange.create=function(options){return new DS.RelationshipChange(options)},DS.RelationshipChangeAdd.create=function(options){return new DS.RelationshipChangeAdd(options)},DS.RelationshipChangeRemove.create=function(options){return new DS.RelationshipChangeRemove(options)},DS.OneToManyChange={},DS.OneToNoneChange={},DS.ManyToNoneChange={},DS.OneToOneChange={},DS.ManyToManyChange={},DS.RelationshipChange._createChange=function(options){return"add"===options.changeType?DS.RelationshipChangeAdd.create(options):"remove"===options.changeType?DS.RelationshipChangeRemove.create(options):void 0},DS.RelationshipChange.determineRelationshipType=function(recordType,knownSide){var key,otherKind,knownKey=knownSide.key,knownKind=knownSide.kind,inverse=recordType.inverseFor(knownKey);return inverse&&(key=inverse.name,otherKind=inverse.kind),inverse?"belongsTo"===otherKind?"belongsTo"===knownKind?"oneToOne":"manyToOne":"belongsTo"===knownKind?"oneToMany":"manyToMany":"belongsTo"===knownKind?"oneToNone":"manyToNone"},DS.RelationshipChange.createChange=function(firstRecord,secondRecord,store,options){var changeType,firstRecordType=firstRecord.constructor;return changeType=DS.RelationshipChange.determineRelationshipType(firstRecordType,options),"oneToMany"===changeType?DS.OneToManyChange.createChange(firstRecord,secondRecord,store,options):"manyToOne"===changeType?DS.OneToManyChange.createChange(secondRecord,firstRecord,store,options):"oneToNone"===changeType?DS.OneToNoneChange.createChange(firstRecord,secondRecord,store,options):"manyToNone"===changeType?DS.ManyToNoneChange.createChange(firstRecord,secondRecord,store,options):"oneToOne"===changeType?DS.OneToOneChange.createChange(firstRecord,secondRecord,store,options):"manyToMany"===changeType?DS.ManyToManyChange.createChange(firstRecord,secondRecord,store,options):void 0},DS.OneToNoneChange.createChange=function(childRecord,parentRecord,store,options){var key=options.key,change=DS.RelationshipChange._createChange({parentRecord:parentRecord,childRecord:childRecord,firstRecord:childRecord,store:store,changeType:options.changeType,firstRecordName:key,firstRecordKind:"belongsTo"});return store.addRelationshipChangeFor(childRecord,key,parentRecord,null,change),change},DS.ManyToNoneChange.createChange=function(childRecord,parentRecord,store,options){var key=options.key,change=DS.RelationshipChange._createChange({parentRecord:childRecord,childRecord:parentRecord,secondRecord:childRecord,store:store,changeType:options.changeType,secondRecordName:options.key,secondRecordKind:"hasMany"});return store.addRelationshipChangeFor(childRecord,key,parentRecord,null,change),change},DS.ManyToManyChange.createChange=function(childRecord,parentRecord,store,options){var key=options.key,change=DS.RelationshipChange._createChange({parentRecord:parentRecord,childRecord:childRecord,firstRecord:childRecord,secondRecord:parentRecord,firstRecordKind:"hasMany",secondRecordKind:"hasMany",store:store,changeType:options.changeType,firstRecordName:key});return store.addRelationshipChangeFor(childRecord,key,parentRecord,null,change),change},DS.OneToOneChange.createChange=function(childRecord,parentRecord,store,options){var key;options.parentType?key=options.parentType.inverseFor(options.key).name:options.key?key=options.key:Ember.assert("You must pass either a parentType or belongsToName option to OneToManyChange.forChildAndParent",!1);var change=DS.RelationshipChange._createChange({parentRecord:parentRecord,childRecord:childRecord,firstRecord:childRecord,secondRecord:parentRecord,firstRecordKind:"belongsTo",secondRecordKind:"belongsTo",store:store,changeType:options.changeType,firstRecordName:key});return store.addRelationshipChangeFor(childRecord,key,parentRecord,null,change),change},DS.OneToOneChange.maintainInvariant=function(options,store,childRecord,key){if("add"===options.changeType&&store.recordIsMaterialized(childRecord)){var oldParent=get(childRecord,key);if(oldParent){var correspondingChange=DS.OneToOneChange.createChange(childRecord,oldParent,store,{parentType:options.parentType,hasManyName:options.hasManyName,changeType:"remove",key:options.key});store.addRelationshipChangeFor(childRecord,key,options.parentRecord,null,correspondingChange),correspondingChange.sync()}}},DS.OneToManyChange.createChange=function(childRecord,parentRecord,store,options){var key;options.parentType?(key=options.parentType.inverseFor(options.key).name,DS.OneToManyChange.maintainInvariant(options,store,childRecord,key)):options.key?key=options.key:Ember.assert("You must pass either a parentType or belongsToName option to OneToManyChange.forChildAndParent",!1);var change=DS.RelationshipChange._createChange({parentRecord:parentRecord,childRecord:childRecord,firstRecord:childRecord,secondRecord:parentRecord,firstRecordKind:"belongsTo",secondRecordKind:"hasMany",store:store,changeType:options.changeType,firstRecordName:key});return store.addRelationshipChangeFor(childRecord,key,parentRecord,change.getSecondRecordName(),change),change},DS.OneToManyChange.maintainInvariant=function(options,store,childRecord,key){if("add"===options.changeType&&childRecord){var oldParent=get(childRecord,key);if(oldParent){var correspondingChange=DS.OneToManyChange.createChange(childRecord,oldParent,store,{parentType:options.parentType,hasManyName:options.hasManyName,changeType:"remove",key:options.key});store.addRelationshipChangeFor(childRecord,key,options.parentRecord,correspondingChange.getSecondRecordName(),correspondingChange),correspondingChange.sync()}}},DS.RelationshipChange.prototype={getSecondRecordName:function(){var parent,name=this.secondRecordName;if(!name){if(parent=this.secondRecord,!parent)return;var childType=this.firstRecord.constructor,inverse=childType.inverseFor(this.firstRecordName);this.secondRecordName=inverse.name}return this.secondRecordName},getFirstRecordName:function(){var name=this.firstRecordName;return name},destroy:function(){var childRecord=this.childRecord,belongsToName=this.getFirstRecordName(),hasManyName=this.getSecondRecordName(),store=this.store;store.removeRelationshipChangeFor(childRecord,belongsToName,this.parentRecord,hasManyName,this.changeType)},getSecondRecord:function(){return this.secondRecord},getFirstRecord:function(){return this.firstRecord},coalesce:function(){var relationshipPairs=this.store.relationshipChangePairsFor(this.firstRecord);forEach(relationshipPairs,function(pair){var addedChange=pair.add,removedChange=pair.remove;addedChange&&removedChange&&(addedChange.destroy(),removedChange.destroy())})}},DS.RelationshipChangeAdd.prototype=Ember.create(DS.RelationshipChange.create({})),DS.RelationshipChangeRemove.prototype=Ember.create(DS.RelationshipChange.create({})),DS.RelationshipChangeAdd.prototype.changeType="add",DS.RelationshipChangeAdd.prototype.sync=function(){var secondRecordName=this.getSecondRecordName(),firstRecordName=this.getFirstRecordName(),firstRecord=this.getFirstRecord(),secondRecord=this.getSecondRecord();secondRecord instanceof DS.Model&&firstRecord instanceof DS.Model&&("belongsTo"===this.secondRecordKind?secondRecord.suspendRelationshipObservers(function(){set(secondRecord,secondRecordName,firstRecord)}):"hasMany"===this.secondRecordKind&&secondRecord.suspendRelationshipObservers(function(){var relationship=get(secondRecord,secondRecordName);isValue(relationship)&&relationship.addObject(firstRecord)})),firstRecord instanceof DS.Model&&secondRecord instanceof DS.Model&&get(firstRecord,firstRecordName)!==secondRecord&&("belongsTo"===this.firstRecordKind?firstRecord.suspendRelationshipObservers(function(){set(firstRecord,firstRecordName,secondRecord)}):"hasMany"===this.firstRecordKind&&firstRecord.suspendRelationshipObservers(function(){var relationship=get(firstRecord,firstRecordName);isValue(relationship)&&relationship.addObject(secondRecord)})),this.coalesce()},DS.RelationshipChangeRemove.prototype.changeType="remove",DS.RelationshipChangeRemove.prototype.sync=function(){var secondRecordName=this.getSecondRecordName(),firstRecordName=this.getFirstRecordName(),firstRecord=this.getFirstRecord(),secondRecord=this.getSecondRecord();secondRecord instanceof DS.Model&&firstRecord instanceof DS.Model&&("belongsTo"===this.secondRecordKind?secondRecord.suspendRelationshipObservers(function(){set(secondRecord,secondRecordName,null)}):"hasMany"===this.secondRecordKind&&secondRecord.suspendRelationshipObservers(function(){var relationship=get(secondRecord,secondRecordName);isValue(relationship)&&relationship.removeObject(firstRecord)})),firstRecord instanceof DS.Model&&get(firstRecord,firstRecordName)&&("belongsTo"===this.firstRecordKind?firstRecord.suspendRelationshipObservers(function(){set(firstRecord,firstRecordName,null)}):"hasMany"===this.firstRecordKind&&firstRecord.suspendRelationshipObservers(function(){var relationship=get(firstRecord,firstRecordName);isValue(relationship)&&relationship.removeObject(secondRecord)})),this.coalesce()}}(),function(){function asyncBelongsTo(type,options,meta){return Ember.computed(function(key,value){var data=get(this,"data"),store=get(this,"store"),promiseLabel="DS: Async belongsTo "+this+" : "+key;if(2===arguments.length)return Ember.assert("You can only add a '"+type+"' record to this relationship",!value||value instanceof store.modelFor(type)),void 0===value?null:DS.PromiseObject.create({promise:Ember.RSVP.resolve(value,promiseLabel)});var link=data.links&&data.links[key],belongsTo=data[key];if(isNone(belongsTo)){if(link){var resolver=Ember.RSVP.defer("DS: Async belongsTo (link) "+this+" : "+key);return store.findBelongsTo(this,link,meta,resolver),DS.PromiseObject.create({promise:resolver.promise})}return null}var promise=store.fetchRecord(belongsTo)||Ember.RSVP.resolve(belongsTo,promiseLabel);return DS.PromiseObject.create({promise:promise})}).property("data").meta(meta)}var get=Ember.get,isNone=(Ember.set,Ember.isNone);DS.belongsTo=function(type,options){"object"==typeof type?(options=type,type=void 0):Ember.assert("The first argument DS.belongsTo must be a model type or string, like DS.belongsTo(App.Person)",!!type&&("string"==typeof type||DS.Model.detect(type))),options=options||{};var meta={type:type,isRelationship:!0,options:options,kind:"belongsTo"};
return options.async?asyncBelongsTo(type,options,meta):Ember.computed(function(key,value){var belongsTo,typeClass,data=get(this,"data"),store=get(this,"store");return typeClass="string"==typeof type?store.modelFor(type):type,2===arguments.length?(Ember.assert("You can only add a '"+type+"' record to this relationship",!value||value instanceof typeClass),void 0===value?null:value):(belongsTo=data[key],isNone(belongsTo)?null:(store.fetchRecord(belongsTo),belongsTo))}).property("data").meta(meta)},DS.Model.reopen({belongsToWillChange:Ember.beforeObserver(function(record,key){if(get(record,"isLoaded")){var oldParent=get(record,key);if(oldParent){var store=get(record,"store"),change=DS.RelationshipChange.createChange(record,oldParent,store,{key:key,kind:"belongsTo",changeType:"remove"});change.sync(),this._changesToSync[key]=change}}}),belongsToDidChange:Ember.immediateObserver(function(record,key){if(get(record,"isLoaded")){var newParent=get(record,key);if(newParent){var store=get(record,"store"),change=DS.RelationshipChange.createChange(record,newParent,store,{key:key,kind:"belongsTo",changeType:"add"});change.sync()}}delete this._changesToSync[key]})})}(),function(){function asyncHasMany(type,options,meta){return Ember.computed(function(key){var relationship=this._relationships[key],promiseLabel="DS: Async hasMany "+this+" : "+key;if(!relationship){var resolver=Ember.RSVP.defer(promiseLabel);relationship=buildRelationship(this,key,options,function(store,data){var rel,link=data.links&&data.links[key];return rel=link?store.findHasMany(this,link,meta,resolver):store.findMany(this,data[key],meta.type,resolver),set(rel,"promise",resolver.promise),rel})}var promise=relationship.get("promise").then(function(){return relationship},null,"DS: Async hasMany records received");return DS.PromiseArray.create({promise:promise})}).property("data").meta(meta)}function buildRelationship(record,key,options,callback){var rels=record._relationships;if(rels[key])return rels[key];var data=get(record,"data"),store=get(record,"store"),relationship=rels[key]=callback.call(record,store,data);return setProperties(relationship,{owner:record,name:key,isPolymorphic:options.polymorphic})}function hasRelationship(type,options){options=options||{};var meta={type:type,isRelationship:!0,options:options,kind:"hasMany"};return options.async?asyncHasMany(type,options,meta):Ember.computed(function(key){return buildRelationship(this,key,options,function(store,data){var records=data[key];return Ember.assert("You looked up the '"+key+"' relationship on '"+this+"' but some of the associated records were not loaded. Either make sure they are all loaded together with the parent record, or specify that the relationship is async (`DS.hasMany({ async: true })`)",Ember.A(records).everyProperty("isEmpty",!1)),store.findMany(this,data[key],meta.type)})}).property("data").meta(meta)}var get=Ember.get,set=Ember.set,setProperties=Ember.setProperties;DS.hasMany=function(type,options){return"object"==typeof type&&(options=type,type=void 0),hasRelationship(type,options)}}(),function(){{var get=Ember.get;Ember.set}DS.Model.reopen({didDefineProperty:function(proto,key,value){if(value instanceof Ember.Descriptor){var meta=value.meta();meta.isRelationship&&"belongsTo"===meta.kind&&(Ember.addObserver(proto,key,null,"belongsToDidChange"),Ember.addBeforeObserver(proto,key,null,"belongsToWillChange")),meta.parentType=proto.constructor}}}),DS.Model.reopenClass({typeForRelationship:function(name){var relationship=get(this,"relationshipsByName").get(name);return relationship&&relationship.type},inverseFor:function(name){function findPossibleInverses(type,inverseType,possibleRelationships){possibleRelationships=possibleRelationships||[];var relationshipMap=get(inverseType,"relationships");if(relationshipMap){var relationships=relationshipMap.get(type);return relationships&&possibleRelationships.push.apply(possibleRelationships,relationshipMap.get(type)),type.superclass&&findPossibleInverses(type.superclass,inverseType,possibleRelationships),possibleRelationships}}var inverseType=this.typeForRelationship(name);if(!inverseType)return null;var options=this.metaForProperty(name).options;if(null===options.inverse)return null;var inverseName,inverseKind;if(options.inverse)inverseName=options.inverse,inverseKind=Ember.get(inverseType,"relationshipsByName").get(inverseName).kind;else{var possibleRelationships=findPossibleInverses(this,inverseType);if(0===possibleRelationships.length)return null;Ember.assert("You defined the '"+name+"' relationship on "+this+", but multiple possible inverse relationships of type "+this+" were found on "+inverseType+". Look at http://emberjs.com/guides/models/defining-models/#toc_explicit-inverses for how to explicitly specify inverses",1===possibleRelationships.length),inverseName=possibleRelationships[0].name,inverseKind=possibleRelationships[0].kind}return{type:inverseType,name:inverseName,kind:inverseKind}},relationships:Ember.computed(function(){var map=new Ember.MapWithDefault({defaultValue:function(){return[]}});return this.eachComputedProperty(function(name,meta){if(meta.isRelationship){"string"==typeof meta.type&&(meta.type=this.store.modelFor(meta.type));var relationshipsForType=map.get(meta.type);relationshipsForType.push({name:name,kind:meta.kind})}}),map}),relationshipNames:Ember.computed(function(){var names={hasMany:[],belongsTo:[]};return this.eachComputedProperty(function(name,meta){meta.isRelationship&&names[meta.kind].push(name)}),names}),relatedTypes:Ember.computed(function(){var type,types=Ember.A();return this.eachComputedProperty(function(name,meta){meta.isRelationship&&(type=meta.type,"string"==typeof type&&(type=get(this,type,!1)||this.store.modelFor(type)),Ember.assert("You specified a hasMany ("+meta.type+") on "+meta.parentType+" but "+meta.type+" was not found.",type),types.contains(type)||(Ember.assert("Trying to sideload "+name+" on "+this.toString()+" but the type doesn't exist.",!!type),types.push(type)))}),types}),relationshipsByName:Ember.computed(function(){var type,map=Ember.Map.create();return this.eachComputedProperty(function(name,meta){meta.isRelationship&&(meta.key=name,type=meta.type,type||"hasMany"!==meta.kind?type||(type=name):type=Ember.String.singularize(name),"string"==typeof type&&(meta.type=this.store.modelFor(type)),map.set(name,meta))}),map}),fields:Ember.computed(function(){var map=Ember.Map.create();return this.eachComputedProperty(function(name,meta){meta.isRelationship?map.set(name,meta.kind):meta.isAttribute&&map.set(name,"attribute")}),map}),eachRelationship:function(callback,binding){get(this,"relationshipsByName").forEach(function(name,relationship){callback.call(binding,name,relationship)})},eachRelatedType:function(callback,binding){get(this,"relatedTypes").forEach(function(type){callback.call(binding,type)})}}),DS.Model.reopen({eachRelationship:function(callback,binding){this.constructor.eachRelationship(callback,binding)}})}(),function(){var get=Ember.get,forEach=(Ember.set,Ember.EnumerableUtils.forEach);DS.RecordArrayManager=Ember.Object.extend({init:function(){this.filteredRecordArrays=Ember.MapWithDefault.create({defaultValue:function(){return[]}}),this.changedRecords=[]},recordDidChange:function(record){1===this.changedRecords.push(record)&&Ember.run.schedule("actions",this,this.updateRecordArrays)},recordArraysForRecord:function(record){return record._recordArrays=record._recordArrays||Ember.OrderedSet.create(),record._recordArrays},updateRecordArrays:function(){forEach(this.changedRecords,function(record){get(record,"isDeleted")?this._recordWasDeleted(record):this._recordWasChanged(record)},this),this.changedRecords.length=0},_recordWasDeleted:function(record){var recordArrays=record._recordArrays;recordArrays&&forEach(recordArrays,function(array){array.removeRecord(record)})},_recordWasChanged:function(record){var filter,type=record.constructor,recordArrays=this.filteredRecordArrays.get(type);forEach(recordArrays,function(array){filter=get(array,"filterFunction"),this.updateRecordArray(array,filter,type,record)},this);var manyArrays=record._loadingRecordArrays;if(manyArrays){for(var i=0,l=manyArrays.length;l>i;i++)manyArrays[i].loadedRecord();record._loadingRecordArrays=[]}},updateRecordArray:function(array,filter,type,record){var shouldBeInArray;shouldBeInArray=filter?filter(record):!0;var recordArrays=this.recordArraysForRecord(record);shouldBeInArray?(recordArrays.add(array),array.addRecord(record)):shouldBeInArray||(recordArrays.remove(array),array.removeRecord(record))},updateFilter:function(array,type,filter){for(var record,typeMap=this.store.typeMapFor(type),records=typeMap.records,i=0,l=records.length;l>i;i++)record=records[i],get(record,"isDeleted")||get(record,"isEmpty")||this.updateRecordArray(array,filter,type,record)},createManyArray:function(type,records){var manyArray=DS.ManyArray.create({type:type,content:records,store:this.store});return forEach(records,function(record){var arrays=this.recordArraysForRecord(record);arrays.add(manyArray)},this),manyArray},createRecordArray:function(type){var array=DS.RecordArray.create({type:type,content:Ember.A(),store:this.store,isLoaded:!0});return this.registerFilteredRecordArray(array,type),array},createFilteredRecordArray:function(type,filter){var array=DS.FilteredRecordArray.create({type:type,content:Ember.A(),store:this.store,manager:this,filterFunction:filter});return this.registerFilteredRecordArray(array,type,filter),array},createAdapterPopulatedRecordArray:function(type,query){return DS.AdapterPopulatedRecordArray.create({type:type,query:query,content:Ember.A(),store:this.store})},registerFilteredRecordArray:function(array,type,filter){var recordArrays=this.filteredRecordArrays.get(type);recordArrays.push(array),this.updateFilter(array,type,filter)},registerWaitingRecordArray:function(record,array){var loadingRecordArrays=record._loadingRecordArrays||[];loadingRecordArrays.push(array),record._loadingRecordArrays=loadingRecordArrays}})}(),function(){var get=Ember.get,map=(Ember.set,Ember.ArrayPolyfills.map),errorProps=["description","fileName","lineNumber","message","name","number","stack"];DS.InvalidError=function(errors){var tmp=Error.prototype.constructor.call(this,"The backend rejected the commit because it was invalid: "+Ember.inspect(errors));this.errors=errors;for(var i=0,l=errorProps.length;l>i;i++)this[errorProps[i]]=tmp[errorProps[i]]},DS.InvalidError.prototype=Ember.create(Error.prototype),DS.Adapter=Ember.Object.extend({find:Ember.required(Function),findAll:null,findQuery:null,generateIdForRecord:null,serialize:function(record,options){return get(record,"store").serializerFor(record.constructor.typeKey).serialize(record,options)},createRecord:Ember.required(Function),updateRecord:Ember.required(Function),deleteRecord:Ember.required(Function),findMany:function(store,type,ids){var promises=map.call(ids,function(id){return this.find(store,type,id)},this);return Ember.RSVP.all(promises)}})}(),function(){var get=Ember.get,fmt=Ember.String.fmt,indexOf=Ember.EnumerableUtils.indexOf,counter=0;DS.FixtureAdapter=DS.Adapter.extend({serializer:null,simulateRemoteResponse:!0,latency:50,fixturesForType:function(type){if(type.FIXTURES){var fixtures=Ember.A(type.FIXTURES);return fixtures.map(function(fixture){var fixtureIdType=typeof fixture.id;if("number"!==fixtureIdType&&"string"!==fixtureIdType)throw new Error(fmt("the id property must be defined as a number or string for fixture %@",[fixture]));return fixture.id=fixture.id+"",fixture})}return null},queryFixtures:function(){Ember.assert("Not implemented: You must override the DS.FixtureAdapter::queryFixtures method to support querying the fixture store.")},updateFixtures:function(type,fixture){type.FIXTURES||(type.FIXTURES=[]);var fixtures=type.FIXTURES;this.deleteLoadedFixture(type,fixture),fixtures.push(fixture)},mockJSON:function(store,type,record){return store.serializerFor(type).serialize(record,{includeId:!0})},generateIdForRecord:function(){return"fixture-"+counter++},find:function(store,type,id){var fixture,fixtures=this.fixturesForType(type);return Ember.assert("Unable to find fixtures for model type "+type.toString(),fixtures),fixtures&&(fixture=Ember.A(fixtures).findProperty("id",id)),fixture?this.simulateRemoteCall(function(){return fixture},this):void 0},findMany:function(store,type,ids){var fixtures=this.fixturesForType(type);return Ember.assert("Unable to find fixtures for model type "+type.toString(),fixtures),fixtures&&(fixtures=fixtures.filter(function(item){return-1!==indexOf(ids,item.id)})),fixtures?this.simulateRemoteCall(function(){return fixtures},this):void 0},findAll:function(store,type){var fixtures=this.fixturesForType(type);return Ember.assert("Unable to find fixtures for model type "+type.toString(),fixtures),this.simulateRemoteCall(function(){return fixtures},this)},findQuery:function(store,type,query){var fixtures=this.fixturesForType(type);return Ember.assert("Unable to find fixtures for model type "+type.toString(),fixtures),fixtures=this.queryFixtures(fixtures,query,type),fixtures?this.simulateRemoteCall(function(){return fixtures},this):void 0},createRecord:function(store,type,record){var fixture=this.mockJSON(store,type,record);return this.updateFixtures(type,fixture),this.simulateRemoteCall(function(){return fixture},this)},updateRecord:function(store,type,record){var fixture=this.mockJSON(store,type,record);return this.updateFixtures(type,fixture),this.simulateRemoteCall(function(){return fixture},this)},deleteRecord:function(store,type,record){var fixture=this.mockJSON(store,type,record);return this.deleteLoadedFixture(type,fixture),this.simulateRemoteCall(function(){return null})},deleteLoadedFixture:function(type,record){var existingFixture=this.findExistingFixture(type,record);if(existingFixture){var index=indexOf(type.FIXTURES,existingFixture);return type.FIXTURES.splice(index,1),!0}},findExistingFixture:function(type,record){var fixtures=this.fixturesForType(type),id=get(record,"id");return this.findFixtureById(fixtures,id)},findFixtureById:function(fixtures,id){return Ember.A(fixtures).find(function(r){return""+get(r,"id")==""+id?!0:!1})},simulateRemoteCall:function(callback,context){var adapter=this;return new Ember.RSVP.Promise(function(resolve){get(adapter,"simulateRemoteResponse")?Ember.run.later(function(){resolve(callback.call(context))},get(adapter,"latency")):Ember.run.schedule("actions",null,function(){resolve(callback.call(context))})},"DS: FixtureAdapter#simulateRemoteCall")}})}(),function(){function coerceId(id){return null==id?null:id+""}var get=Ember.get,forEach=(Ember.set,Ember.ArrayPolyfills.forEach),map=Ember.ArrayPolyfills.map;DS.RESTSerializer=DS.JSONSerializer.extend({normalize:function(type,hash,prop){return this.normalizeId(hash),this.normalizeAttributes(type,hash),this.normalizeRelationships(type,hash),this.normalizeUsingDeclaredMapping(type,hash),this.normalizeHash&&this.normalizeHash[prop]&&this.normalizeHash[prop](hash),this._super(type,hash,prop)},normalizePayload:function(type,payload){return payload},normalizeId:function(hash){var primaryKey=get(this,"primaryKey");"id"!==primaryKey&&(hash.id=hash[primaryKey],delete hash[primaryKey])},normalizeUsingDeclaredMapping:function(type,hash){var payloadKey,key,attrs=get(this,"attrs");if(attrs)for(key in attrs)payloadKey=attrs[key],payloadKey&&payloadKey.key&&(payloadKey=payloadKey.key),"string"==typeof payloadKey&&(hash[key]=hash[payloadKey],delete hash[payloadKey])},normalizeAttributes:function(type,hash){var payloadKey;this.keyForAttribute&&type.eachAttribute(function(key){payloadKey=this.keyForAttribute(key),key!==payloadKey&&(hash[key]=hash[payloadKey],delete hash[payloadKey])},this)},normalizeRelationships:function(type,hash){var payloadKey;this.keyForRelationship&&type.eachRelationship(function(key,relationship){payloadKey=this.keyForRelationship(key,relationship.kind),key!==payloadKey&&(hash[key]=hash[payloadKey],delete hash[payloadKey])},this)},extractSingle:function(store,primaryType,payload,recordId){payload=this.normalizePayload(primaryType,payload);var primaryRecord,primaryTypeName=primaryType.typeKey;for(var prop in payload){var typeName=this.typeForRoot(prop),type=store.modelFor(typeName),isPrimary=type.typeKey===primaryTypeName;isPrimary&&"array"!==Ember.typeOf(payload[prop])?primaryRecord=this.normalize(primaryType,payload[prop],prop):forEach.call(payload[prop],function(hash){var typeName=this.typeForRoot(prop),type=store.modelFor(typeName),typeSerializer=store.serializerFor(type);hash=typeSerializer.normalize(type,hash,prop);var isFirstCreatedRecord=isPrimary&&!recordId&&!primaryRecord,isUpdatedRecord=isPrimary&&coerceId(hash.id)===recordId;isFirstCreatedRecord||isUpdatedRecord?primaryRecord=hash:store.push(typeName,hash)},this)}return primaryRecord},extractArray:function(store,primaryType,payload){payload=this.normalizePayload(primaryType,payload);var primaryArray,primaryTypeName=primaryType.typeKey;for(var prop in payload){var typeKey=prop,forcedSecondary=!1;"_"===prop.charAt(0)&&(forcedSecondary=!0,typeKey=prop.substr(1));var typeName=this.typeForRoot(typeKey),type=store.modelFor(typeName),typeSerializer=store.serializerFor(type),isPrimary=!forcedSecondary&&type.typeKey===primaryTypeName,normalizedArray=map.call(payload[prop],function(hash){return typeSerializer.normalize(type,hash,prop)},this);isPrimary?primaryArray=normalizedArray:store.pushMany(typeName,normalizedArray)}return primaryArray},pushPayload:function(store,payload){payload=this.normalizePayload(null,payload);for(var prop in payload){var typeName=this.typeForRoot(prop),type=store.modelFor(typeName),normalizedArray=map.call(Ember.makeArray(payload[prop]),function(hash){return this.normalize(type,hash,prop)},this);store.pushMany(typeName,normalizedArray)}},typeForRoot:function(root){return Ember.String.singularize(root)},serialize:function(){return this._super.apply(this,arguments)},serializeIntoHash:function(hash,type,record,options){var root=Ember.String.camelize(type.typeKey);hash[root]=this.serialize(record,options)},serializePolymorphicType:function(record,json,relationship){var key=relationship.key,belongsTo=get(record,key);key=this.keyForAttribute?this.keyForAttribute(key):key,json[key+"Type"]=Ember.String.camelize(belongsTo.constructor.typeKey)}})}(),function(){var get=Ember.get,forEach=(Ember.set,Ember.ArrayPolyfills.forEach);DS.RESTAdapter=DS.Adapter.extend({defaultSerializer:"-rest",find:function(store,type,id){return this.ajax(this.buildURL(type.typeKey,id),"GET")},findAll:function(store,type,sinceToken){var query;return sinceToken&&(query={since:sinceToken}),this.ajax(this.buildURL(type.typeKey),"GET",{data:query})},findQuery:function(store,type,query){return this.ajax(this.buildURL(type.typeKey),"GET",{data:query})},findMany:function(store,type,ids){return this.ajax(this.buildURL(type.typeKey),"GET",{data:{ids:ids}})},findHasMany:function(store,record,url){var host=get(this,"host"),id=get(record,"id"),type=record.constructor.typeKey;return host&&"/"===url.charAt(0)&&"/"!==url.charAt(1)&&(url=host+url),this.ajax(this.urlPrefix(url,this.buildURL(type,id)),"GET")},findBelongsTo:function(store,record,url){var id=get(record,"id"),type=record.constructor.typeKey;return this.ajax(this.urlPrefix(url,this.buildURL(type,id)),"GET")},createRecord:function(store,type,record){var data={},serializer=store.serializerFor(type.typeKey);return serializer.serializeIntoHash(data,type,record,{includeId:!0}),this.ajax(this.buildURL(type.typeKey),"POST",{data:data})},updateRecord:function(store,type,record){var data={},serializer=store.serializerFor(type.typeKey);serializer.serializeIntoHash(data,type,record);var id=get(record,"id");return this.ajax(this.buildURL(type.typeKey,id),"PUT",{data:data})},deleteRecord:function(store,type,record){var id=get(record,"id");return this.ajax(this.buildURL(type.typeKey,id),"DELETE")},buildURL:function(type,id){var url=[],host=get(this,"host"),prefix=this.urlPrefix();return type&&url.push(this.pathForType(type)),id&&url.push(id),prefix&&url.unshift(prefix),url=url.join("/"),!host&&url&&(url="/"+url),url},urlPrefix:function(path,parentURL){var host=get(this,"host"),namespace=get(this,"namespace"),url=[];return path?"/"===path.charAt(0)?host&&(path=path.slice(1),url.push(host)):/^http(s)?:\/\//.test(path)||url.push(parentURL):(host&&url.push(host),namespace&&url.push(namespace)),path&&url.push(path),url.join("/")},pathForType:function(type){var camelized=Ember.String.camelize(type);return Ember.String.pluralize(camelized)},ajaxError:function(jqXHR){return jqXHR&&(jqXHR.then=null),jqXHR},ajax:function(url,type,hash){var adapter=this;return new Ember.RSVP.Promise(function(resolve,reject){hash=adapter.ajaxOptions(url,type,hash),hash.success=function(json){Ember.run(null,resolve,json)},hash.error=function(jqXHR){Ember.run(null,reject,adapter.ajaxError(jqXHR))},Ember.$.ajax(hash)},"DS: RestAdapter#ajax "+type+" to "+url)},ajaxOptions:function(url,type,hash){if(hash=hash||{},hash.url=url,hash.type=type,hash.dataType="json",hash.context=this,hash.data&&"GET"!==type&&(hash.contentType="application/json; charset=utf-8",hash.data=JSON.stringify(hash.data)),void 0!==this.headers){var headers=this.headers;hash.beforeSend=function(xhr){forEach.call(Ember.keys(headers),function(key){xhr.setRequestHeader(key,headers[key])})}}return hash}})}(),function(){DS.Model.reopen({_debugInfo:function(){var attributes=["id"],relationships={belongsTo:[],hasMany:[]},expensiveProperties=[];this.eachAttribute(function(name){attributes.push(name)},this),this.eachRelationship(function(name,relationship){relationships[relationship.kind].push(name),expensiveProperties.push(name)});var groups=[{name:"Attributes",properties:attributes,expand:!0},{name:"Belongs To",properties:relationships.belongsTo,expand:!0},{name:"Has Many",properties:relationships.hasMany,expand:!0},{name:"Flags",properties:["isLoaded","isDirty","isSaving","isDeleted","isError","isNew","isValid"]}];return{propertyInfo:{includeOtherProperties:!0,groups:groups,expensiveProperties:expensiveProperties}}}})}(),function(){Ember.String.pluralize=function(word){return Ember.Inflector.inflector.pluralize(word)},Ember.String.singularize=function(word){return Ember.Inflector.inflector.singularize(word)}}(),function(){function loadUncountable(rules,uncountable){for(var i=0,length=uncountable.length;length>i;i++)rules.uncountable[uncountable[i].toLowerCase()]=!0}function loadIrregular(rules,irregularPairs){for(var pair,i=0,length=irregularPairs.length;length>i;i++)pair=irregularPairs[i],rules.irregular[pair[0].toLowerCase()]=pair[1],rules.irregularInverse[pair[1].toLowerCase()]=pair[0]}function Inflector(ruleSet){ruleSet=ruleSet||{},ruleSet.uncountable=ruleSet.uncountable||{},ruleSet.irregularPairs=ruleSet.irregularPairs||{};var rules=this.rules={plurals:ruleSet.plurals||[],singular:ruleSet.singular||[],irregular:{},irregularInverse:{},uncountable:{}};loadUncountable(rules,ruleSet.uncountable),loadIrregular(rules,ruleSet.irregularPairs)}var BLANK_REGEX=/^\s*$/;Inflector.prototype={plural:function(regex,string){this.rules.plurals.push([regex,string.toLowerCase()])},singular:function(regex,string){this.rules.singular.push([regex,string.toLowerCase()])},uncountable:function(string){loadUncountable(this.rules,[string.toLowerCase()])},irregular:function(singular,plural){loadIrregular(this.rules,[[singular,plural]])},pluralize:function(word){return this.inflect(word,this.rules.plurals,this.rules.irregular)},singularize:function(word){return this.inflect(word,this.rules.singular,this.rules.irregularInverse)},inflect:function(word,typeRules,irregular){var inflection,substitution,result,lowercase,isBlank,isUncountable,isIrregular,rule;if(isBlank=BLANK_REGEX.test(word))return word;if(lowercase=word.toLowerCase(),isUncountable=this.rules.uncountable[lowercase])return word;if(isIrregular=irregular&&irregular[lowercase])return isIrregular;for(var i=typeRules.length,min=0;i>min&&(inflection=typeRules[i-1],rule=inflection[0],!rule.test(word));i--);return inflection=inflection||[],rule=inflection[0],substitution=inflection[1],result=word.replace(rule,substitution)}},Ember.Inflector=Inflector}(),function(){Ember.Inflector.defaultRules={plurals:[[/$/,"s"],[/s$/i,"s"],[/^(ax|test)is$/i,"$1es"],[/(octop|vir)us$/i,"$1i"],[/(octop|vir)i$/i,"$1i"],[/(alias|status)$/i,"$1es"],[/(bu)s$/i,"$1ses"],[/(buffal|tomat)o$/i,"$1oes"],[/([ti])um$/i,"$1a"],[/([ti])a$/i,"$1a"],[/sis$/i,"ses"],[/(?:([^f])fe|([lr])f)$/i,"$1$2ves"],[/(hive)$/i,"$1s"],[/([^aeiouy]|qu)y$/i,"$1ies"],[/(x|ch|ss|sh)$/i,"$1es"],[/(matr|vert|ind)(?:ix|ex)$/i,"$1ices"],[/^(m|l)ouse$/i,"$1ice"],[/^(m|l)ice$/i,"$1ice"],[/^(ox)$/i,"$1en"],[/^(oxen)$/i,"$1"],[/(quiz)$/i,"$1zes"]],singular:[[/s$/i,""],[/(ss)$/i,"$1"],[/(n)ews$/i,"$1ews"],[/([ti])a$/i,"$1um"],[/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i,"$1sis"],[/(^analy)(sis|ses)$/i,"$1sis"],[/([^f])ves$/i,"$1fe"],[/(hive)s$/i,"$1"],[/(tive)s$/i,"$1"],[/([lr])ves$/i,"$1f"],[/([^aeiouy]|qu)ies$/i,"$1y"],[/(s)eries$/i,"$1eries"],[/(m)ovies$/i,"$1ovie"],[/(x|ch|ss|sh)es$/i,"$1"],[/^(m|l)ice$/i,"$1ouse"],[/(bus)(es)?$/i,"$1"],[/(o)es$/i,"$1"],[/(shoe)s$/i,"$1"],[/(cris|test)(is|es)$/i,"$1is"],[/^(a)x[ie]s$/i,"$1xis"],[/(octop|vir)(us|i)$/i,"$1us"],[/(alias|status)(es)?$/i,"$1"],[/^(ox)en/i,"$1"],[/(vert|ind)ices$/i,"$1ex"],[/(matr)ices$/i,"$1ix"],[/(quiz)zes$/i,"$1"],[/(database)s$/i,"$1"]],irregularPairs:[["person","people"],["man","men"],["child","children"],["sex","sexes"],["move","moves"],["cow","kine"],["zombie","zombies"]],uncountable:["equipment","information","rice","money","species","series","fish","sheep","jeans","police"]}}(),function(){(Ember.EXTEND_PROTOTYPES===!0||Ember.EXTEND_PROTOTYPES.String)&&(String.prototype.pluralize=function(){return Ember.String.pluralize(this)},String.prototype.singularize=function(){return Ember.String.singularize(this)})}(),function(){Ember.Inflector.inflector=new Ember.Inflector(Ember.Inflector.defaultRules)}(),function(){var get=Ember.get,forEach=Ember.EnumerableUtils.forEach,camelize=Ember.String.camelize,capitalize=Ember.String.capitalize,decamelize=Ember.String.decamelize,singularize=Ember.String.singularize,underscore=Ember.String.underscore;DS.ActiveModelSerializer=DS.RESTSerializer.extend({keyForAttribute:function(attr){return decamelize(attr)},keyForRelationship:function(key,kind){return key=decamelize(key),"belongsTo"===kind?key+"_id":"hasMany"===kind?singularize(key)+"_ids":key},serializeHasMany:Ember.K,serializeIntoHash:function(data,type,record,options){var root=underscore(decamelize(type.typeKey));data[root]=this.serialize(record,options)},serializePolymorphicType:function(record,json,relationship){var key=relationship.key,belongsTo=get(record,key);key=this.keyForAttribute(key),json[key+"_type"]=capitalize(camelize(belongsTo.constructor.typeKey))},typeForRoot:function(root){var camelized=camelize(root);return singularize(camelized)},normalize:function(type,hash,prop){return this.normalizeLinks(hash),this._super(type,hash,prop)},normalizeLinks:function(data){if(data.links){var links=data.links;for(var link in links){var camelizedLink=camelize(link);camelizedLink!==link&&(links[camelizedLink]=links[link],delete links[link])}}},normalizeRelationships:function(type,hash){var payloadKey,payload;this.keyForRelationship&&type.eachRelationship(function(key,relationship){if(relationship.options.polymorphic){if(payloadKey=this.keyForAttribute(key),payload=hash[payloadKey],payload&&payload.type)payload.type=this.typeForRoot(payload.type);else if(payload&&"hasMany"===relationship.kind){var self=this;forEach(payload,function(single){single.type=self.typeForRoot(single.type)})}}else payloadKey=this.keyForRelationship(key,relationship.kind),payload=hash[payloadKey];hash[key]=payload,key!==payloadKey&&delete hash[payloadKey]},this)}})}(),function(){function updatePayloadWithEmbedded(store,serializer,type,partial,payload){var attrs=get(serializer,"attrs");attrs&&type.eachRelationship(function(key,relationship){var expandedKey,embeddedTypeKey,attribute,ids,config=attrs[key],serializer=store.serializerFor(relationship.type.typeKey),primaryKey=get(serializer,"primaryKey");if("hasMany"===relationship.kind&&config&&("always"===config.embedded||"load"===config.embedded)){if(embeddedTypeKey="_"+Ember.String.pluralize(relationship.type.typeKey),expandedKey=this.keyForRelationship(key,relationship.kind),attribute=this.keyForAttribute(key),ids=[],!partial[attribute])return;payload[embeddedTypeKey]=payload[embeddedTypeKey]||[],forEach(partial[attribute],function(data){var embeddedType=store.modelFor(relationship.type.typeKey);updatePayloadWithEmbedded(store,serializer,embeddedType,data,payload),ids.push(data[primaryKey]),payload[embeddedTypeKey].push(data)}),partial[expandedKey]=ids,delete partial[attribute]}},serializer)}var get=Ember.get,forEach=Ember.EnumerableUtils.forEach;DS.EmbeddedRecordsMixin=Ember.Mixin.create({serializeHasMany:function(record,json,relationship){var key=relationship.key,attrs=get(this,"attrs"),embed=attrs&&attrs[key]&&"always"===attrs[key].embedded;embed&&(json[this.keyForAttribute(key)]=get(record,key).map(function(relation){var data=relation.serialize(),primaryKey=get(this,"primaryKey");return data[primaryKey]=get(relation,primaryKey),data},this))},extractSingle:function(store,primaryType,payload,recordId,requestType){var root=this.keyForAttribute(primaryType.typeKey),partial=payload[root];return updatePayloadWithEmbedded(store,this,primaryType,partial,payload),this._super(store,primaryType,payload,recordId,requestType)},extractArray:function(store,type,payload){var root=this.keyForAttribute(type.typeKey),partials=payload[Ember.String.pluralize(root)];return forEach(partials,function(partial){updatePayloadWithEmbedded(store,this,type,partial,payload)},this),this._super(store,type,payload)}})}(),function(){var forEach=Ember.EnumerableUtils.forEach,decamelize=Ember.String.decamelize,underscore=Ember.String.underscore,pluralize=Ember.String.pluralize;DS.ActiveModelAdapter=DS.RESTAdapter.extend({defaultSerializer:"-active-model",pathForType:function(type){var decamelized=decamelize(type),underscored=underscore(decamelized);return pluralize(underscored)},ajaxError:function(jqXHR){var error=this._super(jqXHR);if(jqXHR&&422===jqXHR.status){var response=Ember.$.parseJSON(jqXHR.responseText),errors={};if(void 0!==response.errors){var jsonErrors=response.errors;forEach(Ember.keys(jsonErrors),function(key){errors[Ember.String.camelize(key)]=jsonErrors[key]})}return new DS.InvalidError(errors)}return error}})}(),function(){Ember.onLoad("Ember.Application",function(Application){Application.initializer({name:"activeModelAdapter",initialize:function(container,application){var proxy=new DS.ContainerProxy(container);proxy.registerDeprecations([{deprecated:"serializer:_ams",valid:"serializer:-active-model"},{deprecated:"adapter:_ams",valid:"adapter:-active-model"}]),application.register("serializer:-active-model",DS.ActiveModelSerializer),application.register("adapter:-active-model",DS.ActiveModelAdapter)}})})}()}();